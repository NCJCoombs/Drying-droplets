// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2022 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for elements that solve the advection diffusion equation
// and that can be refined.

#ifndef OOMPH_REFINEABLE_THIN_FILM_BRINKMAN_ELEMENTS_HEADER
#define OOMPH_REFINEABLE_THIN_FILM_BRINKMAN_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// oomph-lib headers
#include "../generic/refineable_quad_element.h"
#include "../generic/refineable_brick_element.h"
#include "../generic/error_estimator.h"
#include "thin_film_brinkman_elements.h"

namespace oomph
{
  //======================================================================
  /// A version of the Advection Diffusion Reaction equations that can be
  /// used with non-uniform mesh refinement. In essence, the class overloads
  /// the fill_in_generic_residual_contribution_adv_diff_react()
  /// function so that contributions
  /// from hanging nodes (or alternatively in-compatible function values)
  /// are taken into account.
  //======================================================================
  template<unsigned DIM>
  class RefineableThinFilmBrinkmanEquations
    : public virtual ThinFilmBrinkmanEquations<DIM>,
      public virtual RefineableElement,
      public virtual ElementWithZ2ErrorEstimator
  {
  public:
    /// Empty Constructor
    RefineableThinFilmBrinkmanEquations()
      : ThinFilmBrinkmanEquations<DIM>(),
        RefineableElement(),
        ElementWithZ2ErrorEstimator()
    {
    }


    /// Broken copy constructor
    RefineableThinFilmBrinkmanEquations(
      const RefineableThinFilmBrinkmanEquations<DIM>&
        dummy) = delete;

    /// Broken assignment operator
    void operator=(
      const RefineableThinFilmBrinkmanEquations<DIM>&) =
      delete;

    /// Number of 'flux' terms for Z2 error estimation
    unsigned num_Z2_flux_terms()
    {
      return 3 * DIM;
    }

    /// Get 'flux' for Z2 error recovery:
    /// Standard flux.from ThinFilmBrinkman equations
    void get_Z2_flux(const Vector<double>& s, Vector<double>& flux)
    {
      this->get_flux(s, flux);
        
//       Find out how many nodes there are in the element
//       unsigned n_node = this->nnode();
// 
//       Set up memory for the shape and test functions
//       Shape psi(n_node);
//       DShape dpsidx(n_node, DIM);
// 
//       Call the derivatives of the shape and test functions
//       this->dshape_eulerian(s, psi, dpsidx);
// 
//       Initialise to zero
//       for (unsigned j = 0; j < 3 * DIM; j++)
//       {
//         flux[j] = 0.0;
//       }
// 
//       Loop over each variable h, \omega and c
//       for (unsigned i = 0; i == 2; i++)
//       {
//        Find the index at which the variable is stored
//        unsigned u_nodal_index = this->u_index_thin_film_brinkman(i);
//        
//        Loop over derivative directions
//        for (unsigned j = 0; j < DIM; j++)
//        {
//          unsigned index = i*DIM + j;
//          Loop over nodes
//          for (unsigned l = 0; l < n_node; l++)
//          {
//             flux[index] += this->nodal_value(l, u_nodal_index) * dpsidx(l, j);
//          }
//        }
//       }
    }

    /// Get the function values c in Vector.
    /// Note: Given the generality of the interface (this function
    /// is usually called from black-box documentation or interpolation
    /// routines), the values Vector sets its own size in here.
    void get_interpolated_values(const Vector<double>& s,
                                 Vector<double>& values)
    {
      // Set size of Vector: c
      values.resize(3);

      // Find number of nodes
      unsigned n_node = nnode();

      // Local shape function
      Shape psi(n_node);

      // Find values of shape function
      shape(s, psi);

      // Loop over the unknowns
      for (unsigned r = 0; r < 3; r++)
      {
        unsigned c_nodal_index = this->u_index_thin_film_brinkman(r);

        // Initialise value of c
        values[r] = 0.0;

        // Loop over the local nodes and sum
        for (unsigned l = 0; l < n_node; l++)
        {
          values[r] += this->nodal_value(l, c_nodal_index) * psi[l];
        }
      }
    }

    /// Get the function values c in Vector.
    /// Note: Given the generality of the interface (this function
    /// is usually called from black-box documentation or interpolation
    /// routines), the values Vector sets its own size in here.
    void get_interpolated_values(const unsigned& t,
                                 const Vector<double>& s,
                                 Vector<double>& values)
    {
      // Set size of Vector:
      values.resize(3);

      // Find out how many nodes there are
      const unsigned n_node = nnode();

      // Shape functions
      Shape psi(n_node);
      shape(s, psi);

      // Loop over the reagents
      for (unsigned r = 0; r < 3; r++)
      {
        // Find the nodal index at which the unknown is stored
        unsigned c_nodal_index = this->u_index_thin_film_brinkman(r);

        // Initialise
        values[r] = 0.0;

        // Calculate value
        for (unsigned l = 0; l < n_node; l++)
        {
          values[r] += this->nodal_value(t, l, c_nodal_index) * psi[l];
        }
      }
    }


    ///  Further build: Copy all pointers from the father
    /// element
    void further_build()
    {
      RefineableThinFilmBrinkmanEquations<DIM>*
        cast_father_element_pt = dynamic_cast<
          RefineableThinFilmBrinkmanEquations<DIM>*>(
          this->father_element_pt());

      // Set the source function from the parent
      this->Evap_flux_pt = cast_father_element_pt->evap_flux_pt();
      
      // Set the transition function from the parent
      this->Transition_fct_pt = cast_father_element_pt->transition_fct_pt();
      
      // Set the derivative of the transition function from the parent
      this->Transition_fct_deriv_pt = cast_father_element_pt->transition_fct_deriv_pt();
      
      // Set the Peclet number from the parent
      this->Pe_pt = cast_father_element_pt->peclet_pt();
      
      // Set the dry-out time from the parent
      this->Dry_out_time_pt = cast_father_element_pt->t_f_pt();
      
      // Set the mobility function from the parent
      this->Mobility_fct_pt = cast_father_element_pt->mobility_fct_pt();
      
      // Set the mobility function derivative (h) from the parent
      this->Mobility_fct_deriv_h_pt = cast_father_element_pt->mobility_fct_deriv_h_pt();
      
      // Set the mobility function derivative (c) from the parent
      this->Mobility_fct_deriv_c_pt = cast_father_element_pt->mobility_fct_deriv_c_pt();
      
      // Set the solute mobility function from the parent
      this->Solute_mobility_fct_pt = cast_father_element_pt->solute_mobility_fct_pt();
      
      // Set the solute mobility function derivative (h) from the parent
      this->Solute_mobility_fct_deriv_h_pt = cast_father_element_pt->solute_mobility_fct_deriv_h_pt();
      
      // Set the solute mobility function derivative (c) from the parent
      this->Solute_mobility_fct_deriv_c_pt = cast_father_element_pt->solute_mobility_fct_deriv_c_pt();
      
      // Set the ALE status from the father
      this->ALE_is_disabled = cast_father_element_pt->ALE_is_disabled;
      
      // Set the axisymmetry flag from the father
      this->Axisymmetry_flag_pt = cast_father_element_pt->axisymmetry_flag_pt();
    }

  protected:
    /// Add the element's contribution to the elemental residual vector
    /// and/or Jacobian matrix
    /// flag=1: compute both
    /// flag=0: compute only residual vector
    void fill_in_generic_residual_contribution_thin_film_brinkman(
      Vector<double>& residuals,
      DenseMatrix<double>& jacobian,
      unsigned flag);
    
  };


  //======================================================================
  /// Refineable version of QThinFilmBrinkmanElement.
  /// Inherit from the standard QThinFilmBrinkmanElement and the
  /// appropriate refineable geometric element and the refineable equations.
  //======================================================================
  template<unsigned DIM, unsigned NNODE_1D>
  class RefineableQThinFilmBrinkmanElement
    : public QThinFilmBrinkmanElement<DIM, NNODE_1D>,
      public virtual RefineableThinFilmBrinkmanEquations<DIM>,
      public virtual RefineableQElement<DIM>
  {
  public:
    /// Empty Constructor:
    RefineableQThinFilmBrinkmanElement()
      : RefineableElement(),
        RefineableThinFilmBrinkmanEquations<DIM>(),
        RefineableQElement<DIM>(),
        QThinFilmBrinkmanElement<DIM, NNODE_1D>()
    {
    }


    /// Broken copy constructor
    RefineableQThinFilmBrinkmanElement(
      const RefineableQThinFilmBrinkmanElement<DIM,
                                               NNODE_1D>& dummy) =
      delete;

    /// Broken assignment operator
    void operator=(
      const RefineableQThinFilmBrinkmanElement<DIM,
                                               NNODE_1D>&) = delete;

    /// Number of continuously interpolated values: 3
    unsigned ncont_interpolated_values() const
    {
      return 3;
    }

    /// Number of vertex nodes in the element
    unsigned nvertex_node() const
    {
      return QThinFilmBrinkmanElement<DIM, NNODE_1D>::
        nvertex_node();
    }

    /// Pointer to the j-th vertex node in the element
    Node* vertex_node_pt(const unsigned& j) const
    {
      return QThinFilmBrinkmanElement<DIM, NNODE_1D>::
        vertex_node_pt(j);
    }

    /// Rebuild from sons: empty
    void rebuild_from_sons(Mesh*& mesh_pt) {}

    /// Order of recovery shape functions for Z2 error estimation:
    /// Same order as shape functions.
    unsigned nrecovery_order()
    {
      return (NNODE_1D - 1);
    }

    ///  Perform additional hanging node procedures for variables
    /// that are not interpolated by all nodes. Empty.
    void further_setup_hanging_nodes() {}
  };

  /// /////////////////////////////////////////////////////////////////////
  /// /////////////////////////////////////////////////////////////////////
  /// /////////////////////////////////////////////////////////////////////


  //=======================================================================
  /// Face geometry for the RefineableQuadThinFilmBrinkmanElement
  /// elements: The spatial dimension of the face elements is one lower than
  /// that of the bulk element but they have the same number of points along
  /// their 1D edges.
  //=======================================================================
  template<unsigned DIM, unsigned NNODE_1D>
  class FaceGeometry<
    RefineableQThinFilmBrinkmanElement<DIM, NNODE_1D>>
    : public virtual QElement<DIM - 1, NNODE_1D>
  {
  public:
    /// Constructor: Call the constructor for the
    /// appropriate lower-dimensional QElement
    FaceGeometry() : QElement<DIM - 1, NNODE_1D>() {}
  };

} // namespace oomph

#endif
 
